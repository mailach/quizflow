version: "3"
services:


  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-net
  kafka:
    env_file:
      - .env.dev
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - kafka-net

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    
    container_name: ksqldb-server
    ports:
      - 8088:8088
    environment:
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
    networks:
      - kafka-net

  ksqldb-cli:
    build:
      context: ./ksqldb-server/
      dockerfile: Dockerfile
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /etc/ksqldb/entrypoint.sh
    tty: true
    environment:
      KSQLDB_SERVER: "http://ksqldb-server:8088"
    networks:
      - kafka-net  
      
  participant-client:
    container_name: participant-client
    build:
      context: ./participant-client/
      dockerfile: Dockerfile
      target: development
    ports:
      - 127.0.0.1:5173:5173
    volumes:
      - ./participant-client/:/app
    restart: unless-stopped
    stdin_open: true
    tty: true
    environment:
      - CHOKIDAR_USEPOLLING=true

  admin-client:
    container_name: admin-client
    build:
      context: ./admin-client/
      dockerfile: Dockerfile
      target: development
    ports:
      - 127.0.0.1:5174:5173
    volumes:
      - ./admin-client/:/app
    restart: unless-stopped
    stdin_open: true
    tty: true
    environment:
      - CHOKIDAR_USEPOLLING=true

  backend:
    env_file:
      - backend/.env
    container_name: backend
    build: backend
    ports:
      - "127.0.0.1:5123:5000"
    environment:
      - FLASK_APP=wsgi:app
    volumes:
      - ./backend:/app
    entrypoint:
    - /bin/sh
    - -c
    - |
      #!/bin/sh
      while ! nc -z kafka 9092; do
        echo "Waiting for Kafka to be ready..."
        sleep 1
      done
      chmod +x /app/init-dev.sh && /app/init-dev.sh
    depends_on:
      - kafka
    networks:
      - kafka-net  

networks:
  kafka-net:
    driver: bridge